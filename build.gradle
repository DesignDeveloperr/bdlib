buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url = "https://jitpack.io"
        }
    }
    dependencies {
        classpath 'com.github.CDAGaming:ForgeGradle:1c670759c5'
    }
}

apply plugin: 'scala'
apply plugin: 'forge'

file "build.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

if (project.hasProperty('forgeOverride')) {
    config.forge.version = forgeOverride
}

if (project.hasProperty('buildnum')) {
    ext.simpleVersion = "${config.bdlib.version}.${project.buildnum}"
} else {
    ext.simpleVersion = "${config.bdlib.version}-DEV"
}

version = simpleVersion + '-mc' + config.minecraft.version

group = "net.bdew"
archivesBaseName = "bdlib"

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "eclipse"
    replace("BDLIB_VER", simpleVersion.toString())
}

processResources
        {
            // this will ensure that this task is redone when the versions change.
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            // replace stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                // replace version and mcversion
                expand 'version':project.version, 'mcversion':project.minecraft.version
            }

            // copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }

task sourceJar(type: Jar) {
    classifier "sources"
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier "dev"
    duplicatesStrategy "exclude"
}

afterEvaluate { project ->
    // Fudge the inputs of source jars so we get the version after replacements
    tasks.getByPath(":sourceJar").from(tasks.getByPath(":sourceMainScala").outputs.files)
}

artifacts {
    archives sourceJar
    archives deobfJar
}